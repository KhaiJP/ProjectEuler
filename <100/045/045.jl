"""
has_inverse finds if n:: Int can be generated by f:: Function.
in other words, return the value of proposition "∃k ∈ N s.t. f(k) = n"
note that f must be monotonically non-decreasing since this function works with binary search
"""
function has_inverse(n:: Int, f:: Function):: Bool
  # sufficiently big number; note that not f(bigger) to exceed MAX(Int64)
  bigger:: Int = 10 ^ 8
  smaller:: Int = 0
  # binary search; f(smaller) < n ≤ f(bigger)
  while bigger - smaller > 1
    mid:: Int = (bigger + smaller) ÷ 2

    if n <= f(mid)
      bigger = mid
    else
      smaller = mid
    end
  end

  return f(bigger) == n
end


triangleProd(n:: Int):: Int   = n * (n+1) ÷ 2
pentagonalProd(n:: Int):: Int = n * (3*n-1) ÷ 2
hexagonalProd(n:: Int):: Int  = n * (2*n-1)

isTriangle(n:: Int):: Bool    = has_inverse(n, triangleProd)
isPentagonal(n:: Int):: Bool  = has_inverse(n, pentagonalProd)
isTriAndPen(n:: Int)::Bool    = isTriangle(n) && isPentagonal(n)
isQualified(n:: Int):: Bool   = n |> hexagonalProd |> isTriAndPen


function main():: Nothing
  upper_limit:: Int = 10^6
  answers:: Base.Generator = (hexagonalProd(n) for n ∈ 144:upper_limit if isQualified(n))
  
  for answer ∈ answers
    message = f"{answer)} is the next number that all triangle, pentagonal, and hexagonal"
    message |> println
    return nothing
  end

  message = f"no number less than or equal to H_{upper_limit} is all triangle, pentagonal, and hexagonal at the same time"
  message |> println
  return nothing
end


@time main()
